<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CctoctoFX</title>
    <link>http://localhost:2000/</link>
    <description>Recent content on CctoctoFX</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 29 Apr 2021 11:22:18 +0800</lastBuildDate><atom:link href="http://localhost:2000/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kubernetes Operator Development History</title>
      <link>http://localhost:2000/post/cloud-computing/k8s-operator-dev/</link>
      <pubDate>Thu, 29 Apr 2021 11:22:18 +0800</pubDate>
      
      <guid>http://localhost:2000/post/cloud-computing/k8s-operator-dev/</guid>
      <description>本文旨在记录对中间件、编排组件容器化部署后，实现kubernetes扩展组件Controller的过程。 Third-Parties kubernetes-client: javascript client-go kube-rs client-go源码分析</description>
    </item>
    
    <item>
      <title>Rust阅读索引</title>
      <link>http://localhost:2000/post/rust/basic/</link>
      <pubDate>Wed, 28 Apr 2021 09:22:18 +0800</pubDate>
      
      <guid>http://localhost:2000/post/rust/basic/</guid>
      <description>Index Learn Rust With Entirely Too Many Linked Lists Rust Programming Language Handbook awesome-rust</description>
    </item>
    
    <item>
      <title>Kubernetes ConfigMap 热更新</title>
      <link>http://localhost:2000/post/cloud-computing/k8s-config-update/</link>
      <pubDate>Sat, 24 Apr 2021 11:22:18 +0800</pubDate>
      
      <guid>http://localhost:2000/post/cloud-computing/k8s-config-update/</guid>
      <description>注：如果对kubernetes的基本概念不太清楚，建议先过一下基本的资源类型再阅读此文 先随便给个例子: 1 2 3 4 5 6 7 8 9 10 apiVersion:v1kind:ConfigMapmetadata:name:test-configdata:config.yml:|-start-message: &amp;#39;Hello, World!&amp;#39; log-level: INFObootstrap.yml:listen-address:&amp;#39;127.0.0.1:8080&amp;#39; 我们定义</description>
    </item>
    
    <item>
      <title>Kubernetes Developement</title>
      <link>http://localhost:2000/post/cloud-computing/k8s-template/</link>
      <pubDate>Wed, 21 Apr 2021 11:22:18 +0800</pubDate>
      
      <guid>http://localhost:2000/post/cloud-computing/k8s-template/</guid>
      <description>资源模板 statefulset举例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 apiVersion:apps/v1beta1kind:StatefulSetmetadata:name:kubiaspec:serviceName:kubiareplicas:2template:metadata:labels:app:kubiaspec:containers:- name:kubiaimage:derios/kubiaports:- name:httpcontainerPort:8080volumeMounts:- name:datamountPath:/var/datavolumeClaimTemplates:- metadata:name:dataspec:resources:requests:storage:1MiaccessModes:- ReadWriteOnce headless service举例 1 2 3 4 5 6</description>
    </item>
    
    <item>
      <title>Kubernetes Handbook (Schedule)</title>
      <link>http://localhost:2000/post/cloud-computing/k8s-advance-schedule/</link>
      <pubDate>Fri, 09 Apr 2021 10:22:18 +0800</pubDate>
      
      <guid>http://localhost:2000/post/cloud-computing/k8s-advance-schedule/</guid>
      <description>内容涵盖 使用节点污点和pod容忍度阻止pod调度到特定节点 将节点亲缘性规则作为节点选择器的一种替代 使用节点亲缘性进行多个pod的共同调度 使用</description>
    </item>
    
    <item>
      <title>LC刷题: 字符串专题</title>
      <link>http://localhost:2000/post/algo/string/</link>
      <pubDate>Thu, 08 Apr 2021 18:22:18 +0800</pubDate>
      
      <guid>http://localhost:2000/post/algo/string/</guid>
      <description>14. Longest Common Prefix 返回最长公共前缀子串。原题 1 2 Input: [&amp;#34;flower&amp;#34;,&amp;#34;flow&amp;#34;,&amp;#34;flight&amp;#34;] Output: &amp;#34;fl&amp;#34; 水平扫描： 从头开始遍历整个数组，并且两两比较LCP。如果第i次比较的结果是空，则停止迭代返回空</description>
    </item>
    
    <item>
      <title>Profiling a Go Service in Production</title>
      <link>http://localhost:2000/post/golang/go-profiling/</link>
      <pubDate>Wed, 07 Apr 2021 11:25:18 +0800</pubDate>
      
      <guid>http://localhost:2000/post/golang/go-profiling/</guid>
      <description>参考 Julia Evans: Profiling Go programs with pprof How I investigated memory leaks in Go using pprof on a large codebase Memory Profiling a Go Service Russ Cox: Profling Go Programs Package pprof overview github: pprof Issue: Why &amp;lsquo;Total MB&amp;rsquo; in golang heap profile is less than &amp;lsquo;RES&amp;rsquo; in top? Issue: Cannot free memory once occupied by bytes.Buffer Issue: FreeOSMemory() in production Issue: Is this an idiomatic worker thread</description>
    </item>
    
    <item>
      <title>Docker Fundamentals: AUFS</title>
      <link>http://localhost:2000/post/cloud-computing/docker-aufs/</link>
      <pubDate>Tue, 06 Apr 2021 11:22:18 +0800</pubDate>
      
      <guid>http://localhost:2000/post/cloud-computing/docker-aufs/</guid>
      <description>AUFS是一种Union File System，所谓的UnionFS实际上就是把不同物理位置的目录合并mount到同一个目录当中。一种典型的Unio</description>
    </item>
    
    <item>
      <title>(转)程序员如何把控自己的职业</title>
      <link>http://localhost:2000/post/programmer-career/</link>
      <pubDate>Mon, 05 Apr 2021 12:40:29 +0800</pubDate>
      
      <guid>http://localhost:2000/post/programmer-career/</guid>
      <description>这篇文章摘自陈皓（左耳朵耗子）的blog（2020/08/07上传），其中很多观点击中了我内心的想法，或许可以在我遇到方向性问题的时候给我提</description>
    </item>
    
    <item>
      <title>Docker Fundamentals: Cgroup</title>
      <link>http://localhost:2000/post/cloud-computing/docker-cgroup/</link>
      <pubDate>Mon, 05 Apr 2021 11:22:18 +0800</pubDate>
      
      <guid>http://localhost:2000/post/cloud-computing/docker-cgroup/</guid>
      <description>Linux Namespace的技术解决了环境隔离的问题，不过这是虚拟化最基本的一步，我们另外需要解决对计算机资源使用上的隔离。说人话，就是虽然Nam</description>
    </item>
    
    <item>
      <title>Docker Fundamentals: Namespace</title>
      <link>http://localhost:2000/post/cloud-computing/docker-namespace/</link>
      <pubDate>Thu, 01 Apr 2021 11:22:18 +0800</pubDate>
      
      <guid>http://localhost:2000/post/cloud-computing/docker-namespace/</guid>
      <description>容器技术出现已经很久，只不过Docker容器平台的出现它变火了。Docker是第一个让容器能在不同机器之间移植的系统，它简化了打包应用的流程</description>
    </item>
    
    <item>
      <title>Go编程模式：Visitor（k8s）</title>
      <link>http://localhost:2000/post/design-pattern/go-visitor/</link>
      <pubDate>Wed, 31 Mar 2021 11:22:18 +0800</pubDate>
      
      <guid>http://localhost:2000/post/design-pattern/go-visitor/</guid>
      <description>概述 最近在看kubernetes的kubectl部分源码，记录一下其中用到的visitor编程模式(实际上kubectl主要用到了build</description>
    </item>
    
    <item>
      <title>Kubernetes Handbook (Start &amp; Pod)</title>
      <link>http://localhost:2000/post/cloud-computing/k8s-basic/</link>
      <pubDate>Wed, 31 Mar 2021 11:22:18 +0800</pubDate>
      
      <guid>http://localhost:2000/post/cloud-computing/k8s-basic/</guid>
      <description>使用minikube构建本地单节点k8s集群 minikube ssh kubectl cluster-info kubectl get nodes #查看节点信息 kubectl describe node minikube #详细信息 多节点k8s集群，使用Google K8s Engine 构建方式看G</description>
    </item>
    
    <item>
      <title>Docker Cheat Sheet</title>
      <link>http://localhost:2000/post/cloud-computing/docker-basic/</link>
      <pubDate>Tue, 30 Mar 2021 11:22:18 +0800</pubDate>
      
      <guid>http://localhost:2000/post/cloud-computing/docker-basic/</guid>
      <description>Books Docker in Action (English ver.) Docker入门到实践(中文) 速查 Docker Cheat Sheet 全量CLI 容器管理CLI 查看容器CLI 容器交互CLI 镜像管理CLI 镜像传输CLI DOCK</description>
    </item>
    
    <item>
      <title>Life of an HTTP request in a Go server</title>
      <link>http://localhost:2000/post/golang/lifecycle-of-http/</link>
      <pubDate>Sat, 20 Feb 2021 11:22:18 +0800</pubDate>
      
      <guid>http://localhost:2000/post/golang/lifecycle-of-http/</guid>
      <description>这篇文章的启发是我在阅读Go的http源码时获得的，之前对这块缺乏深入的了解，这篇文章会结合源码讨论包括典型http request的路由，还</description>
    </item>
    
    <item>
      <title>IaaS vs PaaS vs SaaS</title>
      <link>http://localhost:2000/post/iaas-paas-diff/</link>
      <pubDate>Tue, 16 Feb 2021 12:40:29 +0800</pubDate>
      
      <guid>http://localhost:2000/post/iaas-paas-diff/</guid>
      <description>如果你在考虑将你的在线电子业务转移到云上，下面三个名词会经常遇到： IaaS PaaS SaaS 这些是云计算领域的三个主要类别 你很可能早就听说过它们，在各种各样的业</description>
    </item>
    
    <item>
      <title>Go编程模式：Pipeline</title>
      <link>http://localhost:2000/post/design-pattern/go-pipeline/</link>
      <pubDate>Wed, 03 Feb 2021 11:22:18 +0800</pubDate>
      
      <guid>http://localhost:2000/post/design-pattern/go-pipeline/</guid>
      <description>概述 这篇文章介绍Go编程里的Pipeline模式。如果是对Unix/Linux命令行熟悉的人会知道，Pipeline其实就是把每个命令拼接起</description>
    </item>
    
    <item>
      <title>(转)别让自己墙了自己</title>
      <link>http://localhost:2000/post/do-not-wall/</link>
      <pubDate>Mon, 01 Feb 2021 12:40:29 +0800</pubDate>
      
      <guid>http://localhost:2000/post/do-not-wall/</guid>
      <description>这篇文章摘自陈皓（左耳朵耗子）的blog（2019/12/01上传），作为给自己的提醒。 这一两周与几个朋友聊天，有年轻的90后，也有大叔级的</description>
    </item>
    
    <item>
      <title>(转)工程师应该如何高效学习</title>
      <link>http://localhost:2000/post/how-to-learn/</link>
      <pubDate>Mon, 01 Feb 2021 12:40:29 +0800</pubDate>
      
      <guid>http://localhost:2000/post/how-to-learn/</guid>
      <description>此文转自曹春晖blog，也用于自己学习的一些参考 博客地址 阅读书籍 对于工程师来说，从书籍得来的知识是必不可少的。现在很多年轻的程序员会从网络博</description>
    </item>
    
    <item>
      <title>A Million WebSocket and Go</title>
      <link>http://localhost:2000/post/golang/websocket/</link>
      <pubDate>Sat, 16 Jan 2021 11:22:18 +0800</pubDate>
      
      <guid>http://localhost:2000/post/golang/websocket/</guid>
      <description>这篇文章是我研究高负载网络服务器架构看到的的一个有趣的story，添加了我自身学习websocket的感受和记录，希望我能在飞机落地前写完:</description>
    </item>
    
    <item>
      <title>fasthttp对性能的优化压榨</title>
      <link>http://localhost:2000/post/golang/fasthttp/</link>
      <pubDate>Sun, 10 Jan 2021 11:22:18 +0800</pubDate>
      
      <guid>http://localhost:2000/post/golang/fasthttp/</guid>
      <description>最近在看网络模型和go net的源码，以及各web框架例如fasthttp, weaver, gnet(更轻量)源码。fasthttp在github上已经写上</description>
    </item>
    
    <item>
      <title>[源码分析]sync pool</title>
      <link>http://localhost:2000/post/golang/sync-pool/</link>
      <pubDate>Fri, 01 Jan 2021 11:22:18 +0800</pubDate>
      
      <guid>http://localhost:2000/post/golang/sync-pool/</guid>
      <description>1 2 - 当多个goroutine都需要创建同一个对象，如果gorountine数过多，导致对象的创建数目剧增，进而导致GC压力增大，形成“并发</description>
    </item>
    
    <item>
      <title>[自建轮]高性能Goroutine Pool</title>
      <link>http://localhost:2000/post/golang/goroutine-pool/</link>
      <pubDate>Wed, 30 Dec 2020 11:22:18 +0800</pubDate>
      
      <guid>http://localhost:2000/post/golang/goroutine-pool/</guid>
      <description>高性能Goroutine Pool go调度器没有限制对goroutine的数量，在goroutine瞬时大规模爆发的场景下来不及复用goroutin</description>
    </item>
    
    <item>
      <title>Possible Memory Leak</title>
      <link>http://localhost:2000/post/golang/memory-leak/</link>
      <pubDate>Fri, 25 Dec 2020 11:22:18 +0800</pubDate>
      
      <guid>http://localhost:2000/post/golang/memory-leak/</guid>
      <description>实际上对于一个有GC的语言，我们不必太多关心内存泄漏的问题，因为程序的runtime帮我们很好地额回收不再使用的内存。但是，我们还是得了解一</description>
    </item>
    
    <item>
      <title>Close Channels Gracefully</title>
      <link>http://localhost:2000/post/golang/channel-graceful/</link>
      <pubDate>Thu, 24 Dec 2020 11:22:18 +0800</pubDate>
      
      <guid>http://localhost:2000/post/golang/channel-graceful/</guid>
      <description>优雅地关闭通道 场景一：M个接收者和一个发送者。发送者通过关闭用来传输数据的通道来传递发送结束信号 这是最简单的一种情形。当发送者欲结束发送，让</description>
    </item>
    
    <item>
      <title>Channels Concurrency Work-Around</title>
      <link>http://localhost:2000/post/golang/channels/</link>
      <pubDate>Tue, 22 Dec 2020 11:22:18 +0800</pubDate>
      
      <guid>http://localhost:2000/post/golang/channels/</guid>
      <description>记录了一些channels常见的场景，以及自己的一些感受： 使用通道进行异步和并发编程是简单和惬意的； 通道同步技术比被很多其它语言采用的其它同</description>
    </item>
    
    <item>
      <title>Black Magic</title>
      <link>http://localhost:2000/post/black-magic/</link>
      <pubDate>Sun, 20 Dec 2020 12:40:29 +0800</pubDate>
      
      <guid>http://localhost:2000/post/black-magic/</guid>
      <description>阅读到的一些方便、有趣的技巧或者ideas的随手记录，后续考虑对相关话题专门开坑 一行代码画出专业的论文图 SciencePlots 计算机专业向来不缺少专业的绘图软件</description>
    </item>
    
    <item>
      <title>Tracking</title>
      <link>http://localhost:2000/post/links/</link>
      <pubDate>Sat, 19 Dec 2020 12:40:29 +0800</pubDate>
      
      <guid>http://localhost:2000/post/links/</guid>
      <description>这个post为记录目前正在阅读与研究的section Go语言设计 Go语言设计与实现 Go Under The Hood 1 这两本在写作目的和内容规划都是一致的，不过第二个</description>
    </item>
    
    <item>
      <title>Golang TDD</title>
      <link>http://localhost:2000/post/golang/go-testing/</link>
      <pubDate>Sat, 19 Dec 2020 11:22:18 +0800</pubDate>
      
      <guid>http://localhost:2000/post/golang/go-testing/</guid>
      <description>Preface 本文整理golang编码的单元测试常用示例，以及TDD的简要流程。 单元测试基础 单元测试文件以_test.go结尾，需要记住以下原则： 文件名</description>
    </item>
    
    <item>
      <title>Golang并发调度</title>
      <link>http://localhost:2000/post/golang/schedualing/</link>
      <pubDate>Thu, 17 Dec 2020 11:22:18 +0800</pubDate>
      
      <guid>http://localhost:2000/post/golang/schedualing/</guid>
      <description>性能提升不会凭空出现，它总是伴随着代码复杂度的上升。 The performance improvement does not materialize from the air, it comes with code complexity increase. &amp;ndash; Dmitry Vyukov Go 语言的调度器我认为应该是整个运行时最有趣的组件了。</description>
    </item>
    
    <item>
      <title>Python类自定义</title>
      <link>http://localhost:2000/post/python/python-functionality/</link>
      <pubDate>Mon, 14 Dec 2020 16:20:29 +0800</pubDate>
      
      <guid>http://localhost:2000/post/python/python-functionality/</guid>
      <description>python类关键字 __init__ vs __new__ __init__为初始化方法，__new__为真正的构造函数。 描述符Descriptor __contains__ __slots__ 定制类 type() python作</description>
    </item>
    
    <item>
      <title>BDD: Ginkgo测试框架</title>
      <link>http://localhost:2000/post/golang/bdd-testing-framework/</link>
      <pubDate>Fri, 04 Dec 2020 11:22:18 +0800</pubDate>
      
      <guid>http://localhost:2000/post/golang/bdd-testing-framework/</guid>
      <description>Preface BDD和TDD都是test case first的实现，无非是把后者的test改成前者的behavior。在TDD中，关注的核心点是function</description>
    </item>
    
    <item>
      <title>Golang内存管理</title>
      <link>http://localhost:2000/post/golang/memory-management/</link>
      <pubDate>Wed, 02 Dec 2020 11:22:18 +0800</pubDate>
      
      <guid>http://localhost:2000/post/golang/memory-management/</guid>
      <description>设计原则 现在我们来看 Go 中另一重要的关键组件：内存分配器。 Go 的内存分配器基于 Thread-Cache Malloc (tcmalloc) ，tcmalloc 为每个线程实现了一个本地缓存， 区分了小对象</description>
    </item>
    
    <item>
      <title>Golang逃逸分析</title>
      <link>http://localhost:2000/post/golang/golang-escape-analysis/</link>
      <pubDate>Mon, 23 Nov 2020 11:22:18 +0800</pubDate>
      
      <guid>http://localhost:2000/post/golang/golang-escape-analysis/</guid>
      <description>问题： golang函数传参是不是应该和c一样，尽量不要直接传结构体，而是要传结构体指针？ 逃逸分析 逃逸分析指的是，在计算机语言编译器优化原理中</description>
    </item>
    
    <item>
      <title>Design Pattern: Overview</title>
      <link>http://localhost:2000/post/design-pattern/design-pattern/</link>
      <pubDate>Wed, 11 Nov 2020 11:22:18 +0800</pubDate>
      
      <guid>http://localhost:2000/post/design-pattern/design-pattern/</guid>
      <description>Design pattern Builder Pattern scenario：build complicated object 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50</description>
    </item>
    
    <item>
      <title>Java Fundamentals</title>
      <link>http://localhost:2000/post/java/java-fundamentals/</link>
      <pubDate>Mon, 26 Oct 2020 12:40:29 +0800</pubDate>
      
      <guid>http://localhost:2000/post/java/java-fundamentals/</guid>
      <description>JAVA对象的equals方法和hashCode方法是这样规定的 相等（相同）的对象必须有相等的哈希码 如果两个对象的哈希吗相同，它们不一定相同</description>
    </item>
    
  </channel>
</rss>
